import asyncio
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest
from config import (
    BOT_TOKEN, ADMIN_IDS, WELCOME_MESSAGE,
    SEND_MESSAGE_BTN, PREMIUM_INFO_BTN, MODERATOR_INFO_BTN, RULES_BTN,
    SEND_BTN, CANCEL_BTN, messages
)
from states import MessageStates

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
# –•—Ä–∞–Ω–∏–º –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º –∫–ª—é—á–∞–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
users_db = {}

# –î–æ–±–∞–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
CANCEL_INPUT_BTN = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥"

def register_user(user: types.User, chat_id: int):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–æ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
    user_data = {
        'chat_id': chat_id,
        'user_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name,
        'last_seen': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ ID (–≤—Å–µ–≥–¥–∞ —É–Ω–∏–∫–∞–ª–µ–Ω)
    users_db[str(user.id)] = user_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ username –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if user.username:
        users_db[user.username.lower()] = user_data
        users_db[user.username] = user_data
        users_db[f"@{user.username}"] = user_data
        users_db[f"@{user.username.lower()}"] = user_data

def find_user(identifier: str) -> dict | None:
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª—é–±–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
    # –û—á–∏—â–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    clean_id = identifier.lstrip('@').strip()
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é
    if clean_id in users_db:
        return users_db[clean_id]
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    if clean_id.lower() in users_db:
        return users_db[clean_id.lower()]
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å @
    if f"@{clean_id}" in users_db:
        return users_db[f"@{clean_id}"]
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å @ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    if f"@{clean_id.lower()}" in users_db:
        return users_db[f"@{clean_id.lower()}"]
    
    # –ï—Å–ª–∏ —ç—Ç–æ ID
    if clean_id.isdigit():
        return users_db.get(clean_id)
    
    return None

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=SEND_MESSAGE_BTN)],
            [KeyboardButton(text=PREMIUM_INFO_BTN)],
            [KeyboardButton(text=MODERATOR_INFO_BTN)],
            [KeyboardButton(text=RULES_BTN)]
        ],
        resize_keyboard=True
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    chat_id = message.chat.id
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    register_user(user, chat_id)
    
    logger.info(f"User started bot - ID: {user.id}, Username: {user.username}, ChatID: {chat_id}")
    logger.info(f"Current users in database: {list(users_db.keys())}")
    
    await message.answer(
        text=WELCOME_MESSAGE,
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"
@dp.message(F.text == SEND_MESSAGE_BTN)
async def send_message_handler(message: types.Message, state: FSMContext):
    await state.set_state(MessageStates.waiting_for_username)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=CANCEL_INPUT_BTN)]],
        resize_keyboard=True
    )
    await message.answer(
        "–ö–æ–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?\n"
        "–í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n\n"
        "‚ùó –í–∞–∂–Ω–æ: –ø–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, "
        "–∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞
@dp.message(F.text == CANCEL_INPUT_BTN)
async def cancel_input_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer(
            "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è
@dp.message(MessageStates.waiting_for_username)
async def process_username(message: types.Message, state: FSMContext):
    if message.text == CANCEL_INPUT_BTN:
        await state.clear()
        await message.answer(
            "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return

    username = message.text.strip()
    logger.info(f"Processing username input: {username}")
    
    if not username.startswith("@"):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å @\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: @username",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text=CANCEL_INPUT_BTN)]],
                resize_keyboard=True
            )
        )
        return
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = find_user(username)
    logger.info(f"Search results for {username}: {user_data}")
    
    if user_data:
        await state.update_data(recipient_username=username, recipient_chat_id=user_data['chat_id'])
        await state.set_state(MessageStates.waiting_for_title)
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=CANCEL_INPUT_BTN)]],
            resize_keyboard=True
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=keyboard)
    else:
        bot_username = (await bot.me()).username
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=CANCEL_INPUT_BTN)]],
            resize_keyboard=True
        )
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
            f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω:\n"
            f"1. –ù–∞–π—Ç–∏ –±–æ—Ç–∞: @{bot_username}\n"
            f"2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n"
            f"3. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É\n\n"
            f"–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=keyboard
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        await message.answer(
            f"üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ:\n"
            f"1. –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É @{bot_username}\n"
            f"2. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ó–ê–ü–£–°–¢–ò–¢–¨ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
@dp.message(MessageStates.waiting_for_title)
async def process_title(message: types.Message, state: FSMContext):
    if message.text == CANCEL_INPUT_BTN:
        await state.clear()
        await message.answer(
            "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return

    logger.info(f"Processing title input: {message.text}")
    await state.update_data(message_title=message.text)
    await state.set_state(MessageStates.waiting_for_message)
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=CANCEL_INPUT_BTN)]],
        resize_keyboard=True
    )
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(MessageStates.waiting_for_message)
async def process_message(message: types.Message, state: FSMContext):
    if message.text == CANCEL_INPUT_BTN:
        await state.clear()
        await message.answer(
            "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return

    logger.info(f"Processing message input, length: {len(message.text)}")
    user_data = await state.get_data()
    await state.update_data(message_text=message.text)
    
    preview = f"""
üìß –ö–æ–º—É: {user_data['recipient_username']}
üìë –ó–∞–≥–æ–ª–æ–≤–æ–∫: {user_data['message_title']}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}
"""
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=SEND_BTN), KeyboardButton(text=CANCEL_BTN)]
        ],
        resize_keyboard=True
    )
    
    await state.set_state(MessageStates.waiting_for_confirmation)
    await message.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{preview}", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
@dp.message(MessageStates.waiting_for_confirmation, F.text.in_([SEND_BTN, CANCEL_BTN]))
async def process_confirmation(message: types.Message, state: FSMContext):
    logger.info(f"Processing confirmation: {message.text}")
    
    if message.text == SEND_BTN:
        user_data = await state.get_data()
        logger.info(f"Sending message with data: {user_data}")
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = f"""
üì® –í–∞–º –ø—Ä–∏—à–ª–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!

üìë –ó–∞–≥–æ–ª–æ–≤–æ–∫: {user_data['message_title']}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {user_data['message_text']}
üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}

–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: @{(await bot.me()).username}"""

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(user_data['recipient_chat_id'], message_text)
            logger.info(f"Message sent successfully to chat_id: {user_data['recipient_chat_id']}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!", reply_markup=get_main_keyboard())
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            if ADMIN_IDS:
                admin_notification = f"""
üìß –ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {message.from_user.id}
üì® –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {user_data['recipient_username']}
üìë –ó–∞–≥–æ–ª–æ–≤–æ–∫: {user_data['message_title']}
"""
                for admin_id in ADMIN_IDS:
                    try:
                        await bot.send_message(admin_id, admin_notification)
                    except Exception as e:
                        logger.error(f"Failed to notify admin {admin_id}: {e}")
        
        except Exception as e:
            logger.error(f"Error sending message: {e}")
            error_msg = str(e).lower()
            
            if "blocked by user" in error_msg:
                await message.answer(
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.",
                    reply_markup=get_main_keyboard()
                )
            else:
                await message.answer(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}",
                    reply_markup=get_main_keyboard()
                )
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=get_main_keyboard())
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ Premium"
@dp.message(F.text == PREMIUM_INFO_BTN)
async def premium_info_handler(message: types.Message):
    await message.answer(messages.premium_info)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–∞–±–æ—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"
@dp.message(F.text == MODERATOR_INFO_BTN)
async def moderator_info_handler(message: types.Message):
    await message.answer(messages.moderator_unavailable)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–≤–∏–ª–∞"
@dp.message(F.text == RULES_BTN)
async def rules_handler(message: types.Message):
    await message.answer(messages.rules)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 